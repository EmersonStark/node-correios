{"name":"Node.js correios","tagline":"Módulo de NodeJS para calcular frete utilizando a API dos Correios","body":"# Correios Node.js\r\n\r\n[![Build Status](https://travis-ci.org/vitorleal/node-correios.svg?branch=master)](https://travis-ci.org/vitorleal/node-correios)\r\n[![Built with Grunt](https://cdn.gruntjs.com/builtwith.png)](http://gruntjs.com/)\r\n[![npm](https://img.shields.io/npm/v/npm.svg)](https://github.com/vitorleal/node-correios)\r\n[![npm](https://img.shields.io/npm/l/express.svg)](https://github.com/vitorleal/node-correios)\r\n\r\n[![NPM](https://nodei.co/npm/node-correios.png?mini=true)](https://nodei.co/npm/node-correios/)\r\n\r\nMódulo de [Node.js](http://nodejs.org) que utilizar a API SOAP dos Correios para **calcular frete de envio** e **buscar endereço pelo CEP**.\r\n[API dos Correios](http://www.correios.com.br/webServices/PDF/SCPP_manual_implementacao_calculo_remoto_de_precos_e_prazos.pdf)\r\n\r\n\r\n## APP de Exemplo\r\n\r\n- Calcula frete - [link](http://correios-server.herokuapp.com/frete?nCdServico=40010,40045&sCepOrigem=22041030&sCepDestino=04569001&nVlPeso=1&nCdFormato=1&nVlComprimento=20&nVlAltura=4&nVlLargura=11&nVlDiametro=20&nVlValorDeclarado=500)\r\n- Calcula frete/prazo - [link](http://correios-server.herokuapp.com/frete/prazo?nCdServico=40010,40045&sCepOrigem=22041030&sCepDestino=04569001&nVlPeso=1&nCdFormato=1&nVlComprimento=20&nVlAltura=4&nVlLargura=11&nVlDiametro=20&nVlValorDeclarado=500)\r\n- Busca Cep - [link](http://correios-server.herokuapp.com/cep/22421010)\r\n\r\n\r\n## Como instalar\r\n\r\nBasta utilizar o [NPM](npmjs.org) com a *flag* **--save** para guardar como dependência no seu **package.json**\r\n\r\n```\r\nnpm install node-correios --save\r\n```\r\n\r\n\r\n## Como utilizar o calculo de frete\r\n\r\n```javascript\r\nvar Correios = require('node-correios'),\r\n    correios = new Correios();\r\n\r\n//executa o método de pesquisa de valor do frete\r\ncorreios.calcPreco(args);\r\n\r\n//quando o evento result for emitido faz um log do retorno da api\r\ncorreios.on('result', function (result) {\r\n  console.log(result);\r\n});\r\n\r\n//se ocorreu algum erro na execução faz um log do erro\r\ncorreios.on('error', function (err) {\r\n  console.log(err);\r\n});\r\n\r\n//você também pode utilize um callback\r\ncorreios.calcPreco(args, function (result) {\r\n  console.log(result);\r\n});\r\n\r\n```\r\n\r\n### Calcupar preço do frete\r\n\r\nNo exemplo anterior a variável **correios** é um objeto *[EventEmiter](http://nodejs.org/api/events.html)*. Você pode \"escutar\" pelos seguintes eventos:\r\n\r\n- ```result``` - Array com o resultado da pesquisa\r\n\r\n##### Exemplo de resultado\r\n\r\nRetorno com **sucesso**\r\n\r\n```\r\n[{\r\n\tCodigo: 40010,\r\n\tValor: '23,30',\r\n\tValorMaoPropria: '0,00',\r\n\tValorAvisoRecebimento: '0,00',\r\n\tValorValorDeclarado: '0,00',\r\n\tErro: {},\r\n\tMsgErro: {}\r\n}]\r\n```\r\n\r\nRetorno com **erro**\r\n\r\n```\r\n[{\r\n\tCodigo: 40010,\r\n\tValor: '0,00',\r\n\tValorMaoPropria: '0,00',\r\n\tValorAvisoRecebimento: '0,00',\r\n\tValorValorDeclarado: '0,00',\r\n\tErro: '-20',\r\n\tMsgErro: 'A largura nao pode ser inferior a 11 cm.'\r\n}]\r\n```\r\n\r\n- ```error```  - Retorna o erro ocorrido na execução\r\n\r\n##### Exemplo de erro\r\n\r\n```\r\nEnvie todos os campos obrigatórios\r\n```\r\n\r\n### Métodos\r\n\r\nOs métodos implementados são: calcPreco e calcPrecoPrazo\r\n\r\n##### correios.calcPreco(args);\r\n\r\n##### correios.calcPrecoPrazo(args);\r\n\r\nPara executar o comando tem que enviar os campos **obrigatórios**. Para mais detalhes e informações veja o [PDF da API dos correios](http://www.correios.com.br/webServices/PDF/SCPP_manual_implementacao_calculo_remoto_de_precos_e_prazos.pdf)\r\n\r\n###### Obrigatórios\r\n\r\n- ``nCdServico`` - **String**\r\n\r\n\tCódigo do serviço:\r\n\t- 40010 = SEDEX Varejo\r\n\t- 40045 = SEDEX a Cobrar Varejo\r\n\t- 40215 = SEDEX 10 Varejo\r\n\t- 40290 = SEDEX Hoje Varejo\r\n\t- 41106 = PAC Varejo\r\n\r\n- ``sCepOrigem`` - **String**\r\n\r\n\tCEP de Origem sem hífen. Exemplo: **05311900**\r\n\r\n- ``sCepDestino`` - **String**\r\n\r\n\tCEP de Destino sem hífen\r\n\r\n- ``nVlPeso`` - **String**\r\n\r\n\tPeso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg\r\n\r\n- ``nCdFormato`` - **Inteiro**\r\n\r\n\tFormato da encomenda (incluindo embalagem)\r\n\t- 1 = Formato caixa/pacote\r\n\t- 2 = Formato rolo/prisma\r\n\t- 3 = Envelope\r\n\r\n- ``nVlComprimento`` - **Decimal**\r\n\r\n\tComprimento da encomenda (incluindo embalagem), em centímetros\r\n\r\n- ``nVlAltura`` - **Decimal**\r\n\r\n\tAltura da encomenda (incluindo embalagem), em centímetros. Se o formato for envelope, informar zero (0)\r\n\r\n- ``nVlLargura`` - **Decimal**\r\n\r\n\tLargura da encomenda (incluindo embalagem), em centímetros\r\n\r\n- ``nVlDiametro`` - **Decimal**\r\n\r\n\tDiâmetro da encomenda (incluindo embalagem), em centímetros\r\n\r\n###### Não obrigatórios\r\n- ``nCdEmpresa`` - **String**\r\n\r\n\tSeu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios\r\n\r\n- ``sDsSenha`` - **String**\r\n\r\n\tSenha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato\r\n\r\n- ``sCdMaoPropria`` - **String**\r\n\r\n\tIndica se a encomenda será entregue com o serviço adicional mão própria\r\n\t- S = sim\r\n\t- N = não **PADRÃO**\r\n\r\n\r\n- ``nVlValorDeclarado`` - **Decimal**\r\n\r\n\tIndica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais\r\n\r\n- ``sCdAvisoRecebimento`` - **String**\r\n\r\n\tIndica se a encomenda será entregue com o serviço adicional mão própria\r\n\t- S = sim\r\n\t- N = não **PADRÃO**\r\n\r\n\r\n## Como utilizar a buscar por CEP\r\n\r\n```javascript\r\nvar Correios = require('node-correios'),\r\n    correios = new Correios();\r\n\r\n//Buscar endereço pelo CEP\r\ncorreios.consultaCEP({ cep: '00000000' });\r\n\r\n//quando o evento result for emitido faz um log do retorno da api\r\ncorreios.on('result', function (result) {\r\n  console.log(result);\r\n});\r\n\r\n//se ocorreu algum erro na execução faz um log do erro\r\ncorreios.on('error', function (err) {\r\n  console.log(err);\r\n});\r\n\r\n//você também pode utilize um callback\r\ncorreios.consultaCEP({ cep: '00000000' }, function(result) {\r\n  console.log(result)\r\n});\r\n\r\n```\r\n\r\nNo exemplo anterior a variável **correios** é um objeto *[EventEmiter](http://nodejs.org/api/events.html)*. Você pode \"escutar\" pelos seguintes eventos:\r\n\r\n- ```result``` - Objecto com o resultado da pesquisa\r\n\r\n##### Exemplo de resultado\r\n\r\nRetorno com **sucesso**\r\n\r\n```\r\n{\r\n  bairro: 'Ipanema',\r\n  cep: '22421030',\r\n  localidade: 'Rio de Janeiro',\r\n  logradouro: 'Rua Redentor',\r\n  uf: 'RJ'\r\n}\r\n```\r\n\r\nRetorno com **erro**\r\n\r\n```\r\n{\r\n  Erro: 404,\r\n  MsgError: 'Cep não encontrado'\r\n}\r\n\r\n```\r\n\r\n\r\n## Autor\r\n\r\n| [![twitter/vitorleal](http://gravatar.com/avatar/e133221d7fbc0dee159dca127d2f6f00?s=80)](http://twitter.com/vitorleal \"Follow @vitorleal on Twitter\") |\r\n|---|\r\n| [Vitor Leal](http://vitorleal.com) |\r\n\r\n\r\n## Licença\r\n\r\nVeja [LICENSE.txt](https://github.com/vitorleal/node-correios/blob/master/LICENSE.txt)\r\n\r\n","google":"UA-5427757-17","note":"Don't delete this file! It's used internally to help with page regeneration."}